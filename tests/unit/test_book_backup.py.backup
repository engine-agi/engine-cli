"""Tests for book_backup.py module."""
import pytest
import os
import tempfile
import yaml
from unittest.mock import patch, MagicMock, mock_open
from click.testing import CliRunner
import sys
import json

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../src'))

try:
    from engine_cli.commands.book_backup import (
        WorkflowStorage,
        WorkflowResolver,
        CLIWorkflowBuilder,
        cli,
        get_workflow_storage
    )
except ImportError:
    # Fallback for test environment
    WorkflowStorage = MagicMock
    WorkflowResolver = MagicMock
    CLIWorkflowBuilder = MagicMock
    cli = MagicMock()
    get_workflow_storage = MagicMock()


class TestWorkflowStorage:
    """Test WorkflowStorage class."""

    def setup_method(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.original_cwd = os.getcwd()
        os.chdir(self.temp_dir)

    def teardown_method(self):
        """Clean up test fixtures."""
        os.chdir(self.original_cwd)
        # Clean up temp directory
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)

    def test_init_creates_workflows_dir(self):
        """Test that WorkflowStorage creates workflows directory."""
        storage = WorkflowStorage()
        assert os.path.exists("workflows")
        assert os.path.isdir("workflows")

    def test_list_workflows_empty(self):
        """Test listing workflows when directory is empty."""
        storage = WorkflowStorage()
        workflows = storage.list_workflows()
        assert workflows == []

    def test_list_workflows_with_files(self):
        """Test listing workflows with valid YAML files."""
        storage = WorkflowStorage()

        # Create test workflow file
        workflow_data = {
            'id': 'test_workflow',
            'name': 'Test Workflow',
            'version': '1.0.0',
            'description': 'A test workflow',
            'vertex_count': 2,
            'edge_count': 1,
            'created_at': '2024-01-01T00:00:00'
        }

        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        workflows = storage.list_workflows()
        assert len(workflows) == 1
        assert workflows[0]['id'] == 'test_workflow'
        assert workflows[0]['name'] == 'Test Workflow'
        assert workflows[0]['version'] == '1.0.0'
        assert workflows[0]['vertex_count'] == 2
        assert workflows[0]['edge_count'] == 1

    def test_list_workflows_corrupt_file(self):
        """Test listing workflows with corrupt files."""
        storage = WorkflowStorage()

        # Create file with binary content
        workflow_path = os.path.join("workflows", "corrupt.yaml")
        with open(workflow_path, 'wb') as f:
            f.write(b'\x00\x01\x02invalid')

        workflows = storage.list_workflows()
        # Should skip corrupt files
        assert workflows == []

    def test_load_workflow_exists(self):
        """Test loading an existing workflow."""
        storage = WorkflowStorage()

        workflow_data = {
            'id': 'test_workflow',
            'name': 'Test Workflow',
            'version': '1.0.0',
            'vertex_count': 2,
            'edge_count': 1
        }

        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        loaded = storage.load_workflow('test_workflow')
        assert loaded is not None
        assert loaded['id'] == 'test_workflow'
        assert loaded['name'] == 'Test Workflow'

    def test_load_workflow_not_exists(self):
        """Test loading a non-existing workflow."""
        storage = WorkflowStorage()
        loaded = storage.load_workflow('nonexistent')
        assert loaded is None

    def test_load_workflow_invalid_yaml(self):
        """Test loading workflow with invalid YAML."""
        storage = WorkflowStorage()

        workflow_path = os.path.join("workflows", "invalid_workflow.yaml")
        with open(workflow_path, 'w') as f:
            f.write("invalid: yaml: content: [\n")

        loaded = storage.load_workflow('invalid_workflow')
        assert loaded is None

    def test_delete_workflow_exists(self):
        """Test deleting an existing workflow."""
        storage = WorkflowStorage()

        workflow_data = {'id': 'test_workflow', 'name': 'Test Workflow'}
        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        # Verify file exists
        assert os.path.exists(workflow_path)

        # Delete workflow
        result = storage.delete_workflow('test_workflow')
        assert result == True
        assert not os.path.exists(workflow_path)

    def test_delete_workflow_not_exists(self):
        """Test deleting a non-existing workflow."""
        storage = WorkflowStorage()
        result = storage.delete_workflow('nonexistent')
        assert result == False

    def test_delete_workflow_file_error(self):
        """Test deleting workflow when file operation fails."""
        storage = WorkflowStorage()

        # Create workflow file
        workflow_data = {'id': 'test_workflow', 'name': 'Test Workflow'}
        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        # Mock os.remove to raise exception
        with patch('os.remove', side_effect=OSError("Permission denied")):
            result = storage.delete_workflow('test_workflow')
            assert result == False
            # File should still exist
            assert os.path.exists(workflow_path)

    @patch('yaml.safe_dump')
    @patch('builtins.open', new_callable=mock_open)
    def test_save_workflow_basic(self, mock_file, mock_yaml_dump):
        """Test saving a basic workflow."""
        storage = WorkflowStorage()

        # Mock workflow object
        mock_workflow = MagicMock()
        mock_workflow.id = 'test_workflow'
        mock_workflow.name = 'Test Workflow'
        mock_workflow.vertex_count = 2
        mock_workflow.edge_count = 1
        mock_workflow.created_at = MagicMock()
        mock_workflow.created_at.isoformat.return_value = '2024-01-01T00:00:00'
        mock_workflow.config = MagicMock()
        mock_workflow.config.description = 'Test description'
        mock_workflow.config.version = '1.0.0'

        result = storage.save_workflow(mock_workflow)
        assert result == True

        # Verify yaml.safe_dump was called
        mock_yaml_dump.assert_called_once()

    @patch('yaml.safe_dump')
    @patch('builtins.open', new_callable=mock_open)
    def test_save_workflow_with_builder(self, mock_file, mock_yaml_dump):
        """Test saving workflow with CLIWorkflowBuilder."""
        storage = WorkflowStorage()

        # Mock workflow
        mock_workflow = MagicMock()
        mock_workflow.id = 'complex_workflow'
        mock_workflow.name = 'Complex Workflow'
        mock_workflow.vertex_count = 3
        mock_workflow.edge_count = 2
        mock_workflow.created_at = MagicMock()
        mock_workflow.created_at.isoformat.return_value = '2024-01-01T00:00:00'
        mock_workflow.config = MagicMock()
        mock_workflow.config.description = 'Complex workflow'
        mock_workflow.config.version = '2.0.0'

        # Create builder with specs
        builder = CLIWorkflowBuilder()
        builder.agent_specs = [
            {'vertex_id': 'agent1', 'agent_id': 'test_agent', 'instruction': 'Test instruction'}
        ]
        builder.team_specs = [
            {'vertex_id': 'team1', 'team_id': 'test_team', 'tasks': [{'task': 'test_task'}]}
        ]
        builder.edge_specs = [
            {'from': 'agent1', 'to': 'team1'}
        ]

        result = storage.save_workflow(mock_workflow, builder)
        assert result == True

        # Verify yaml.safe_dump was called
        mock_yaml_dump.assert_called_once()

    @patch('yaml.safe_dump')
    @patch('builtins.open', new_callable=mock_open)
    @patch('os.makedirs')
    def test_save_workflow_directory_creation_error(self, mock_makedirs, mock_file, mock_yaml_dump):
        """Test saving workflow when directory creation fails."""
        storage = WorkflowStorage()

        mock_workflow = MagicMock()
        mock_workflow.id = 'test_workflow'
        mock_workflow.name = 'Test Workflow'
        mock_workflow.vertex_count = 1
        mock_workflow.edge_count = 0
        mock_workflow.created_at = MagicMock()
        mock_workflow.created_at.isoformat.return_value = '2024-01-01T00:00:00'
        mock_workflow.config = MagicMock()
        mock_workflow.config.description = 'Test'
        mock_workflow.config.version = '1.0.0'

        mock_makedirs.side_effect = OSError("Permission denied")

        result = storage.save_workflow(mock_workflow)
        assert result == False

        # Verify yaml.safe_dump was called
        mock_yaml_dump.assert_called_once()


class TestWorkflowResolver:


class TestWorkflowStorage:
    """Test WorkflowStorage class."""

    def setup_method(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.original_cwd = os.getcwd()
        os.chdir(self.temp_dir)

    def teardown_method(self):
        """Clean up test fixtures."""
        os.chdir(self.original_cwd)
        # Clean up temp directory
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)

    def test_init_creates_workflows_dir(self):
        """Test that WorkflowStorage creates workflows directory."""
        storage = WorkflowStorage()
        assert os.path.exists("workflows")
        assert os.path.isdir("workflows")

    def test_list_workflows_empty(self):
        """Test listing workflows when directory is empty."""
        storage = WorkflowStorage()
        workflows = storage.list_workflows()
        assert workflows == []

    def test_list_workflows_with_files(self):
        """Test listing workflows with valid YAML files."""
        storage = WorkflowStorage()

        # Create test workflow file
        workflow_data = {
            'id': 'test_workflow',
            'name': 'Test Workflow',
            'version': '1.0.0',
            'description': 'A test workflow',
            'vertex_count': 2,
            'edge_count': 1,
            'created_at': '2024-01-01T00:00:00'
        }

        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        workflows = storage.list_workflows()
        assert len(workflows) == 1
        assert workflows[0]['id'] == 'test_workflow'
        assert workflows[0]['name'] == 'Test Workflow'
        assert workflows[0]['version'] == '1.0.0'
        assert workflows[0]['vertex_count'] == 2
        assert workflows[0]['edge_count'] == 1

    def test_list_workflows_invalid_yaml(self):
        """Test listing workflows with invalid YAML files."""
        storage = WorkflowStorage()

        # Create invalid YAML file
        workflow_path = os.path.join("workflows", "invalid.yaml")
        with open(workflow_path, 'w') as f:
            f.write("invalid: yaml: content: [\n")

        # Create valid YAML file
        valid_data = {'id': 'valid_workflow', 'name': 'Valid Workflow'}
        valid_path = os.path.join("workflows", "valid.yaml")
        with open(valid_path, 'w') as f:
            yaml.safe_dump(valid_data, f)

        workflows = storage.list_workflows()
        assert len(workflows) == 1
        assert workflows[0]['id'] == 'valid_workflow'

    def test_list_workflows_corrupt_file(self):
        """Test listing workflows with corrupt files."""
        storage = WorkflowStorage()

        # Create file with binary content
        workflow_path = os.path.join("workflows", "corrupt.yaml")
        with open(workflow_path, 'wb') as f:
            f.write(b'\x00\x01\x02invalid')

        workflows = storage.list_workflows()
        # Should skip corrupt files
        assert workflows == []

    def test_load_workflow_exists(self):
        """Test loading an existing workflow."""
        storage = WorkflowStorage()

        workflow_data = {
            'id': 'test_workflow',
            'name': 'Test Workflow',
            'version': '1.0.0',
            'vertex_count': 2,
            'edge_count': 1
        }

        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        loaded = storage.load_workflow('test_workflow')
        assert loaded is not None
        assert loaded['id'] == 'test_workflow'
        assert loaded['name'] == 'Test Workflow'

    def test_load_workflow_not_exists(self):
        """Test loading a non-existing workflow."""
        storage = WorkflowStorage()
        loaded = storage.load_workflow('nonexistent')
        assert loaded is None

    def test_load_workflow_invalid_yaml(self):
        """Test loading workflow with invalid YAML."""
        storage = WorkflowStorage()

        workflow_path = os.path.join("workflows", "invalid_workflow.yaml")
        with open(workflow_path, 'w') as f:
            f.write("invalid: yaml: content: [\n")

        loaded = storage.load_workflow('invalid_workflow')
        assert loaded is None

    def test_delete_workflow_exists(self):
        """Test deleting an existing workflow."""
        storage = WorkflowStorage()

        workflow_data = {'id': 'test_workflow', 'name': 'Test Workflow'}
        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        # Verify file exists
        assert os.path.exists(workflow_path)

        # Delete workflow
        result = storage.delete_workflow('test_workflow')
        assert result == True
        assert not os.path.exists(workflow_path)

    def test_delete_workflow_not_exists(self):
        """Test deleting a non-existing workflow."""
        storage = WorkflowStorage()
        result = storage.delete_workflow('nonexistent')
        assert result == False

    def test_delete_workflow_file_error(self):
        """Test deleting workflow when file operation fails."""
        storage = WorkflowStorage()

        # Create workflow file
        workflow_data = {'id': 'test_workflow', 'name': 'Test Workflow'}
        workflow_path = os.path.join("workflows", "test_workflow.yaml")
        with open(workflow_path, 'w') as f:
            yaml.safe_dump(workflow_data, f)

        # Mock os.remove to raise exception
        with patch('os.remove', side_effect=OSError("Permission denied")):
            result = storage.delete_workflow('test_workflow')
            assert result == False
            # File should still exist
            assert os.path.exists(workflow_path)

    @patch('yaml.safe_dump')
    @patch('builtins.open', new_callable=mock_open)
    def test_save_workflow_basic(self, mock_file, mock_yaml_dump):
        """Test saving a basic workflow."""
        storage = WorkflowStorage()

        # Mock workflow object
        mock_workflow = MagicMock()
        mock_workflow.id = 'test_workflow'
        mock_workflow.name = 'Test Workflow'
        mock_workflow.vertex_count = 2
        mock_workflow.edge_count = 1
        mock_workflow.created_at = MagicMock()
        mock_workflow.created_at.isoformat.return_value = '2024-01-01T00:00:00'
        mock_workflow.config = MagicMock()
        mock_workflow.config.description = 'Test description'
        mock_workflow.config.version = '1.0.0'

        result = storage.save_workflow(mock_workflow)
        assert result == True

        # Verify yaml.safe_dump was called
        mock_yaml_dump.assert_called_once()

    @patch('yaml.safe_dump')
    @patch('builtins.open', new_callable=mock_open)
    def test_save_workflow_with_builder(self, mock_file, mock_yaml_dump):
        """Test saving workflow with CLIWorkflowBuilder."""
        storage = WorkflowStorage()

        # Mock workflow
        mock_workflow = MagicMock()
        mock_workflow.id = 'complex_workflow'
        mock_workflow.name = 'Complex Workflow'
        mock_workflow.vertex_count = 3
        mock_workflow.edge_count = 2
        mock_workflow.created_at = MagicMock()
        mock_workflow.created_at.isoformat.return_value = '2024-01-01T00:00:00'
        mock_workflow.config = MagicMock()
        mock_workflow.config.description = 'Complex workflow'
        mock_workflow.config.version = '2.0.0'

        # Create builder with specs
        builder = CLIWorkflowBuilder()
        builder.agent_specs = [
            {'vertex_id': 'agent1', 'agent_id': 'test_agent', 'instruction': 'Test instruction'}
        ]
        builder.team_specs = [
            {'vertex_id': 'team1', 'team_id': 'test_team', 'tasks': [{'task': 'test_task'}]}
        ]
        builder.edge_specs = [
            {'from': 'agent1', 'to': 'team1'}
        ]

        result = storage.save_workflow(mock_workflow, builder)
        assert result == True

        # Verify yaml.safe_dump was called
        mock_yaml_dump.assert_called_once()

    @patch('yaml.safe_dump')
    @patch('builtins.open', new_callable=mock_open)
    @patch('os.makedirs')
    def test_save_workflow_directory_creation_error(self, mock_makedirs, mock_file, mock_yaml_dump):
        """Test saving workflow when directory creation fails."""
        storage = WorkflowStorage()

        mock_workflow = MagicMock()
        mock_workflow.id = 'test_workflow'
        mock_workflow.name = 'Test Workflow'
        mock_workflow.vertex_count = 1
        mock_workflow.edge_count = 0
        mock_workflow.created_at = MagicMock()
        mock_workflow.created_at.isoformat.return_value = '2024-01-01T00:00:00'
        mock_workflow.config = MagicMock()
        mock_workflow.config.description = 'Test'
        mock_workflow.config.version = '1.0.0'

        mock_makedirs.side_effect = OSError("Permission denied")

        result = storage.save_workflow(mock_workflow)
        assert result == False


class TestWorkflowResolver:
    """Test WorkflowResolver class."""

    def test_init(self):
        """Test WorkflowResolver initialization."""
        resolver = WorkflowResolver()
        assert resolver.agent_storage is None
        assert resolver.team_storage is None

    @patch('engine_cli.commands.team.get_team_storage')
    def test_get_team_storage_success(self, mock_get_team_storage):
        """Test successful team storage loading."""
        mock_storage = MagicMock()
        mock_get_team_storage.return_value = mock_storage

        resolver = WorkflowResolver()
        storage = resolver._get_team_storage()

        assert storage == mock_storage
        assert resolver.team_storage == mock_storage
        mock_get_team_storage.assert_called_once()

    @patch('engine_cli.commands.book_backup.WorkflowResolver._get_team_storage', return_value=None)
    def test_get_team_storage_import_error(self, mock_get_team_storage):
        """Test team storage loading when import fails."""
        resolver = WorkflowResolver()
        storage = resolver._get_team_storage()

        assert storage is None
        assert resolver.team_storage is None

    @patch('engine_cli.commands.book_backup.WorkflowBuilder')
    def test_resolve_workflow_basic(self, mock_builder_class):
        """Test basic workflow resolution."""
        mock_builder = MagicMock()
        mock_builder.with_id.return_value = mock_builder
        mock_builder.with_name.return_value = mock_builder
        mock_builder.build.return_value = MagicMock()

        mock_builder_class.return_value = mock_builder

        resolver = WorkflowResolver()

        workflow_data = {
            'id': 'test_workflow',
            'name': 'Test Workflow',
            'vertex_count': 2,
            'edge_count': 1,
            'config': MagicMock()
        }

        result = resolver.resolve_workflow(workflow_data)
        assert result is not None

        mock_builder_class.assert_called_once()
        mock_builder.with_id.assert_called_with('test_workflow')
        mock_builder.with_name.assert_called_with('Test Workflow')


class TestCLIWorkflowBuilder:
    """Test CLIWorkflowBuilder class."""

    def test_init(self):
        """Test CLIWorkflowBuilder initialization."""
        builder = CLIWorkflowBuilder()
        assert builder.agent_specs == []
        assert builder.team_specs == []
        assert builder.edge_specs == []

    @patch('engine_core.WorkflowBuilder')
    def test_with_id(self, mock_builder_class):
        """Test setting workflow ID."""
        mock_builder = MagicMock()
        mock_builder.with_id.return_value = mock_builder
        mock_builder_class.return_value = mock_builder

        builder = CLIWorkflowBuilder()
        # Initialize workflow_builder
        builder.workflow_builder = mock_builder
        result = builder.with_id('test_id')

        assert result == builder
        mock_builder.with_id.assert_called_with('test_id')

    @patch('engine_core.WorkflowBuilder')
    def test_with_name(self, mock_builder_class):
        """Test setting workflow name."""
        mock_builder = MagicMock()
        mock_builder.with_name.return_value = mock_builder
        mock_builder_class.return_value = mock_builder

        builder = CLIWorkflowBuilder()
        builder.workflow_builder = mock_builder
        result = builder.with_name('Test Workflow')

        assert result == builder
        mock_builder.with_name.assert_called_with('Test Workflow')

    @patch('engine_core.WorkflowBuilder')
    def test_add_agent_vertex(self, mock_builder_class):
        """Test adding agent vertex."""
        mock_builder = MagicMock()
        mock_builder.add_function_vertex.return_value = mock_builder
        mock_builder_class.return_value = mock_builder

        builder = CLIWorkflowBuilder()
        builder.workflow_builder = mock_builder
        result = builder.add_agent_vertex('vertex1', 'agent1', 'Test instruction')

        assert result == builder
        assert len(builder.agent_specs) == 1
        assert builder.agent_specs[0]['vertex_id'] == 'vertex1'
        assert builder.agent_specs[0]['agent_id'] == 'agent1'
        assert builder.agent_specs[0]['instruction'] == 'Test instruction'
        mock_builder.add_function_vertex.assert_called_once()

    @patch('engine_core.WorkflowBuilder')
    def test_add_team_vertex(self, mock_builder_class):
        """Test adding team vertex."""
        mock_builder = MagicMock()
        mock_builder.add_function_vertex.return_value = mock_builder
        mock_builder_class.return_value = mock_builder

        builder = CLIWorkflowBuilder()
        builder.workflow_builder = mock_builder
        tasks = [{'task': 'test_task'}]
        result = builder.add_team_vertex('vertex1', 'team1', tasks)

        assert result == builder
        assert len(builder.team_specs) == 1
        assert builder.team_specs[0]['vertex_id'] == 'vertex1'
        assert builder.team_specs[0]['team_id'] == 'team1'
        assert builder.team_specs[0]['tasks'] == tasks
        mock_builder.add_function_vertex.assert_called_once()

    @patch('engine_core.WorkflowBuilder')
    def test_add_edge(self, mock_builder_class):
        """Test adding edge."""
        mock_builder = MagicMock()
        mock_builder.add_edge.return_value = mock_builder
        mock_builder_class.return_value = mock_builder

        builder = CLIWorkflowBuilder()
        builder.workflow_builder = mock_builder
        result = builder.add_edge('from_vertex', 'to_vertex')

        assert result == builder
        assert len(builder.edge_specs) == 1
        assert builder.edge_specs[0]['from'] == 'from_vertex'
        assert builder.edge_specs[0]['to'] == 'to_vertex'
        mock_builder.add_edge.assert_called_with('from_vertex', 'to_vertex')

    @patch('engine_core.WorkflowBuilder')
    def test_build(self, mock_builder_class):
        """Test building workflow."""
        mock_workflow = MagicMock()
        mock_builder = MagicMock()
        mock_builder.build.return_value = mock_workflow
        mock_builder_class.return_value = mock_builder

        builder = CLIWorkflowBuilder()
        builder.workflow_builder = mock_builder
        result = builder.build()

        assert result == mock_workflow
        mock_builder.build.assert_called_once()


class TestWorkflowCLI:
    """Test workflow CLI commands."""

    def setup_method(self):
        """Set up test fixtures."""
        self.runner = CliRunner()

    @patch('engine_cli.commands.book_backup.WorkflowStorage')
    @patch('builtins.open', new_callable=mock_open)
    @patch('yaml.safe_load')
    def test_show_command_success(self, mock_yaml_load, mock_file, mock_storage_class):
        """Test show command for existing workflow."""
        mock_storage = MagicMock()
        mock_storage.list_workflows.return_value = [
            {'id': 'test_workflow', 'file': 'test_workflow.yaml'}
        ]
        mock_storage_class.return_value = mock_storage

        workflow_data = {
            'id': 'test_workflow',
            'name': 'Test Workflow',
            'description': 'A test workflow',
            'vertices': [{'id': 'vertex1', 'type': 'agent'}],
            'edges': [{'from': 'vertex1', 'to': 'vertex2'}]
        }
        mock_yaml_load.return_value = workflow_data

        result = self.runner.invoke(cli, ['show', 'test_workflow'])
        assert result.exit_code == 0
        assert "Test Workflow" in result.output

    @patch('engine_cli.commands.book_backup.WorkflowStorage')
    @patch('os.path.exists')
    @patch('os.remove')
    def test_delete_command_success(self, mock_remove, mock_exists, mock_storage_class):
        """Test delete command success."""
        mock_storage = MagicMock()
        mock_storage.list_workflows.return_value = [
            {'id': 'test_workflow', 'file': 'test_workflow.yaml'}
        ]
        mock_storage_class.return_value = mock_storage

        mock_exists.return_value = True

        result = self.runner.invoke(cli, ['delete', 'test_workflow', '--force'])
        assert result.exit_code == 0
        assert "deleted successfully" in result.output.lower()


class TestWorkflowFunctions:
    """Test utility functions."""

    def test_get_workflow_storage(self):
        """Test get_workflow_storage function."""
        storage = get_workflow_storage()
        assert isinstance(storage, WorkflowStorage)