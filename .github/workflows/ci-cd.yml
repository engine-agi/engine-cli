name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f pyproject.toml ]; then
          pip install poetry
          poetry install --with dev
        elif [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        elif [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f pyproject.toml ]; then pip install -e .; fi

    - name: Install linting tools
      run: |
        pip install black flake8 mypy coverage

    - name: Run linting
      run: |
        black --check --diff src/ tests/
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        mypy src/ --ignore-missing-imports

    - name: Install engine-core for testing
      run: |
        # Try to install from local path first, fallback to git
        if [ -d "../engine-core" ]; then
          pip install -e ../engine-core
        else
          pip install git+https://github.com/engine-agi/engine-core.git@main
        fi

    - name: Run tests with coverage
      run: |
        python -m pytest --version
        coverage run -m pytest tests/ -v --tb=short
        coverage report --fail-under=80
        coverage xml

    - name: Test CLI commands
      run: |
        python -m engine_cli --help
        python -m engine_cli agent --help
        python -m engine_cli workflow --help
        python -m engine_cli team --help

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
        poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}

    - name: Build package
      run: poetry build

    - name: Publish to TestPyPI (if token available)
      run: |
        if [ -n "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          poetry publish --repository testpypi
        else
          echo "TestPyPI token not available, skipping test publish"
        fi
      continue-on-error: true

    - name: Publish to PyPI
      run: poetry publish
        python -m engine.cli --help