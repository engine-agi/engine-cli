name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Installing Poetry..."
        pip install poetry
        echo "Configuring Poetry..."
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        echo "Installing project dependencies..."
        poetry install --with dev --no-interaction

    - name: Verify Poetry installation
      run: |
        echo "Python version: $(python --version)"
        echo "Poetry version: $(poetry --version)"
        poetry run python --version
        echo "Checking core dependencies..."
        poetry run pip list | grep -E "(engine-core|click|pyyaml|rich)" || echo "Some core dependencies may be missing"

    - name: Install linting tools
      run: |
        pip install black flake8 mypy coverage

    - name: Run linting
      run: |
        black --check --diff src/ tests/
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        mypy src/ --ignore-missing-imports

    - name: Install engine-core for testing
      run: |
        echo "Installing engine-core..."
        # Try to install from local path first, fallback to git
        if [ -d "../engine-core" ]; then
          echo "Installing from local path..."
          pip install -e ../engine-core
        else
          echo "Installing from git repository..."
          pip install git+https://github.com/engine-agi/engine-core.git@main
        fi
        echo "Verifying engine-core installation..."
        python -c "import engine_core; print('engine-core version:', engine_core.__version__)" || echo "engine-core import failed"

    - name: Run tests with coverage
      run: |
        echo "Starting tests..."
        python -m pytest --version
        echo "Running test suite..."
        coverage run -m pytest tests/ -v --tb=short
        echo "Generating coverage report..."
        coverage report --fail-under=80
        coverage xml
        echo "Tests completed successfully"

    - name: Test CLI commands
      run: |
        echo "Testing CLI commands..."
        python -m engine_cli --help || echo "CLI help failed"
        python -m engine_cli agent --help || echo "Agent command failed"
        python -m engine_cli workflow --help || echo "Workflow command failed"
        python -m engine_cli team --help || echo "Team command failed"
        echo "CLI tests completed"

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config pypi-token.pypi "${{ secrets.PYPI_API_TOKEN }}"
        poetry config pypi-token.testpypi "${{ secrets.TEST_PYPI_API_TOKEN }}"

    - name: Build package
      run: poetry build

    - name: Publish to TestPyPI (if token available)
      run: |
        if [ -n "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          poetry publish --repository testpypi
        else
          echo "TestPyPI token not available, skipping test publish"
        fi
      continue-on-error: true

    - name: Publish to PyPI
      run: poetry publish
